---
title: "Scrape_Abgeordnete_4.qmd"
format: html
editor: visual
---

## Api-calls for information

This script uses api-calls to get information about gender, residence, first name, last name and birth-year

```{r}
# load libraries
library(rvest)
library(jsonlite)

# load data
politicians <- fromJSON("abgeordnetenwatch_data.json")
```

```{r}
base_api_link <- "https://www.abgeordnetenwatch.de/api/v2/politicians/"
gender <- vector()
first_name <- vector()
last_name <- vector()
year_of_birth <- vector()
residence <- vector()

# make api calls for each politician
for (id in 1:length(politicians$ID)) {
  url <- paste(base_api_link, politicians$ID[id], sep = "")
  dat <- fromJSON(url)
  first_name <- append(first_name, dat$data$first_name)
  last_name <- append(last_name, dat$data$last_name)

  if (is.null(dat$data$year_of_birth)) {
    year_of_birth <- append(year_of_birth, "")
  } else {
    year_of_birth <- append(year_of_birth, as.numeric(dat$data$year_of_birth))
  }
  
  
  if (is.null(dat$data$sex)) {
    gender <- append(gender, "")
  } else {
    gender <- append(gender, dat$data$sex)
  }
  
  
  if (is.null(dat$data$residence)) {
    residence <- append(residence, "")
  } else {
    residence <- append(residence, dat$data$residence)
  }
}
```

```{r}
# add scraped data to dataframe
politicians$First_Name <- first_name
politicians$Last_Name <- last_name
politicians$Gender <- gender
politicians$Year_of_birth <- year_of_birth
politicians$Residence <- residence
```

```{r}
# drop columns which are not necessary anymore
politicians <- subset(politicians, select = -c(Q_A_Link, No_of_Q_pages))

```

```{r}
# export updated data
politicians_json <- toJSON(politicians)

write(politicians_json, file = "abgeordnetenwatch_data.json")
```
